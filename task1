import sqlite3
import bcrypt
import tkinter as tk
from tkinter import messagebox, ttk

# Database setup and functions
def create_db():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE,
                    password TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    quantity INTEGER,
                    price REAL)''')
    conn.commit()
    conn.close()

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def check_password(stored_hash, password):
    return bcrypt.checkpw(password.encode('utf-8'), stored_hash)

def authenticate_user(username, password):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT password FROM users WHERE username = ?", (username,))
    user = c.fetchone()
    conn.close()
    if user:
        return check_password(user[0], password)
    return False

def add_user(username, password):
    hashed_pw = hash_password(password)
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_pw))
    conn.commit()
    conn.close()

def add_product(name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
    conn.commit()
    conn.close()

def edit_product(product_id, name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("UPDATE products SET name = ?, quantity = ?, price = ? WHERE id = ?", 
              (name, quantity, price, product_id))
    conn.commit()
    conn.close()

def delete_product(product_id):
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()

def get_products():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products")
    products = c.fetchall()
    conn.close()
    return products

def low_stock_alert():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products WHERE quantity <= 5")
    low_stock = c.fetchall()
    conn.close()
    return low_stock

def generate_sales_report():
    conn = sqlite3.connect('inventory.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products")
    products = c.fetchall()
    total_sales = sum([product[2] * product[3] for product in products])  # quantity * price
    conn.close()
    return total_sales

# GUI Setup with Tkinter
class InventoryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Inventory Management System")
        self.create_login_screen()

    def create_login_screen(self):
        self.clear_screen()

        self.username_label = tk.Label(self.root, text="Username")
        self.username_label.grid(row=0, column=0, padx=10, pady=10)
        self.username_entry = tk.Entry(self.root)
        self.username_entry.grid(row=0, column=1, padx=10, pady=10)

        self.password_label = tk.Label(self.root, text="Password")
        self.password_label.grid(row=1, column=0, padx=10, pady=10)
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.grid(row=1, column=1, padx=10, pady=10)

        self.login_button = tk.Button(self.root, text="Login", command=self.login)
        self.login_button.grid(row=2, column=0, columnspan=2, pady=10)

        self.register_button = tk.Button(self.root, text="Register", command=self.register)
        self.register_button.grid(row=3, column=0, columnspan=2, pady=10)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if authenticate_user(username, password):
            self.create_main_screen()
        else:
            messagebox.showerror("Login Error", "Invalid Username or Password")

    def register(self):
        self.clear_screen()

        self.new_username_label = tk.Label(self.root, text="New Username")
        self.new_username_label.grid(row=0, column=0, padx=10, pady=10)
        self.new_username_entry = tk.Entry(self.root)
        self.new_username_entry.grid(row=0, column=1, padx=10, pady=10)

        self.new_password_label = tk.Label(self.root, text="New Password")
        self.new_password_label.grid(row=1, column=0, padx=10, pady=10)
        self.new_password_entry = tk.Entry(self.root, show="*")
        self.new_password_entry.grid(row=1, column=1, padx=10, pady=10)

        self.create_button = tk.Button(self.root, text="Create Account", command=self.create_account)
        self.create_button.grid(row=2, column=0, columnspan=2, pady=10)

    def create_account(self):
        username = self.new_username_entry.get()
        password = self.new_password_entry.get()
        add_user(username, password)
        messagebox.showinfo("Success", "Account Created Successfully!")
        self.create_login_screen()

    def create_main_screen(self):
        self.clear_screen()

        self.add_product_button = tk.Button(self.root, text="Add Product", command=self.add_product)
        self.add_product_button.grid(row=0, column=0, pady=10)

        self.view_products_button = tk.Button(self.root, text="View Products", command=self.view_products)
        self.view_products_button.grid(row=0, column=1, pady=10)

        self.low_stock_button = tk.Button(self.root, text="Low Stock Alerts", command=self.low_stock_alert)
        self.low_stock_button.grid(row=1, column=0, pady=10)

        self.sales_report_button = tk.Button(self.root, text="Generate Sales Report", command=self.generate_sales_report)
        self.sales_report_button.grid(row=1, column=1, pady=10)

    def add_product(self):
        self.clear_screen()

        self.product_name_label = tk.Label(self.root, text="Product Name")
        self.product_name_label.grid(row=0, column=0, padx=10, pady=10)
        self.product_name_entry = tk.Entry(self.root)
        self.product_name_entry.grid(row=0, column=1, padx=10, pady=10)

        self.quantity_label = tk.Label(self.root, text="Quantity")
        self.quantity_label.grid(row=1, column=0, padx=10, pady=10)
        self.quantity_entry = tk.Entry(self.root)
        self.quantity_entry.grid(row=1, column=1, padx=10, pady=10)

        self.price_label = tk.Label(self.root, text="Price")
        self.price_label.grid(row=2, column=0, padx=10, pady=10)
        self.price_entry = tk.Entry(self.root)
        self.price_entry.grid(row=2, column=1, padx=10, pady=10)

        self.save_button = tk.Button(self.root, text="Save", command=self.save_product)
        self.save_button.grid(row=3, column=0, columnspan=2, pady=10)

    def save_product(self):
        name = self.product_name_entry.get()
        quantity = int(self.quantity_entry.get())
        price = float(self.price_entry.get())
        add_product(name, quantity, price)
        messagebox.showinfo("Success", "Product Added!")
        self.create_main_screen()

    def view_products(self):
        self.clear_screen()

        products = get_products()
        tree = ttk.Treeview(self.root, columns=("ID", "Name", "Quantity", "Price"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Name", text="Name")
        tree.heading("Quantity", text="Quantity")
        tree.heading("Price", text="Price")
        tree.grid(row=0, column=0, padx=10, pady=10)

        for product in products:
            tree.insert("", "end", values=product)

    def low_stock_alert(self):
        self.clear_screen()

        low_stock = low_stock_alert()
        tree = ttk.Treeview(self.root, columns=("ID", "Name", "Quantity"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Name", text="Name")
        tree.heading("Quantity", text="Quantity")
        tree.grid(row=0, column=0, padx=10, pady=10)

        for product in low_stock:
            tree.insert("", "end", values=(product[0], product[1], product[2]))

    def generate_sales_report(self):
        total_sales = generate_sales_report()
        messagebox.showinfo("Sales Report", f"Total Sales: ${total_sales:.2f}")
        self.create_main_screen()

    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.grid_forget()

# Running the application
if __name__ == "__main__":
    create_db()
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()
